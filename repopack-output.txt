This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-21T17:14:16.266Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
templates/
  index.html
  result.html
.gitignore
app.py
README.md
requirements.txt

================================================================
Repository Files
================================================================

================
File: templates/index.html
================
<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Analyzer</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #b19cd9;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            background-color: #2d2d2d;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            text-align: center;
            color: #d7bfdc;
        }
        form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        input[type="file"] {
            background-color: #3d3d3d;
            color: #b19cd9;
            padding: 0.5rem;
            border: none;
            border-radius: 5px;
        }
        input[type="submit"] {
            background-color: #6a5acd;
            color: white;
            padding: 0.5rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        input[type="submit"]:hover {
            background-color: #483d8b;
        }
        label {
            color: #d7bfdc;
        }
        .delete-button {
            background-color: #ff4d4d;
            color: white;
            padding: 0.5rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 2rem;
        }
        .delete-button:hover {
            background-color: #e60000;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Log Analyzer</h1>
        <form action="/" method="post" enctype="multipart/form-data">
            <label for="period1">First Log Period:</label>
            <input type="file" id="period1" name="period1" accept=".csv" required>
            <label for="period2">Second Log Period:</label>
            <input type="file" id="period2" name="period2" accept=".csv" required>
            <input type="submit" value="Analyze">
        </form>
        <br><br>
        <form action="/delete_files" method="post">
            <input type="submit" value="Delete All Files" class="delete-button">
        </form>
    </div>
</body>
</html>

================
File: templates/result.html
================
<!-- templates/result.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analysis Results</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #b19cd9;
            line-height: 1.6;
            padding: 2rem;
            margin: 0;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #2d2d2d;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1, h2 {
            color: #d7bfdc;
        }
        a {
            color: #6a5acd;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        .delete-button {
            background-color: #ff4d4d;
            color: white;
            padding: 0.5rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            display: inline-block;
            margin-top: 2rem;
        }
        .delete-button:hover {
            background-color: #e60000;
        }
    </style>
</head>
<body>
    <div class="container">
        {{ report }}
        <p>
            <a href="{{ url_for('download_file', filename='crawl_analysis.csv') }}">Download CSV</a> |
            <a href="{{ url_for('download_file', filename='crawl_analysis_report.md') }}">Download Markdown</a>
            {% if png_generated %}
            | <a href="{{ url_for('download_file', filename='crawl_analysis_report.png') }}">Download PNG</a>
            {% endif %}
        </p>
        <br><br>
        <form action="/delete_files" method="post">
            <input type="submit" value="Delete All Files" class="delete-button">
        </form>
    </div>
</body>
</html>

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Virtual environment
venv/
ENV/

# Flask stuff:
instance/
.webassets-cache

# Logs
*.log

# Uploaded and generated files
log_uploads/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

================
File: app.py
================
import csv
from collections import defaultdict
from pathlib import Path
import os
import shutil

from flask import Flask, render_template, request, send_file, redirect, url_for, flash
from markupsafe import Markup
import markdown
import imgkit

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'  # Replace with a real secret key

# Create log_uploads directory if it doesn't exist
os.makedirs("log_uploads", exist_ok=True)

def read_csv(file_path):
    data = defaultdict(int)
    with open(file_path, 'r') as f:
        reader = csv.reader(f)
        next(reader)  # Skip header
        for row in reader:
            url, crawls = row[0], int(row[1])
            data[url] = crawls
    return data

def analyze_crawl_data(data1, data2):
    all_urls = set(data1.keys()) | set(data2.keys())
    analysis = []
    total1, total2 = 0, 0

    for url in all_urls:
        crawls1 = data1.get(url, 0)
        crawls2 = data2.get(url, 0)
        diff = crawls2 - crawls1
        percent_change = (diff / crawls1 * 100) if crawls1 != 0 else float('inf')
        
        analysis.append({
            'URL': url,
            'Period1_Crawls': crawls1,
            'Period2_Crawls': crawls2,
            'Difference': diff,
            'Percent_Change': percent_change
        })
        
        total1 += crawls1
        total2 += crawls2

    analysis.sort(key=lambda x: x['Difference'], reverse=True)
    
    total_diff = total2 - total1
    total_percent_change = (total_diff / total1 * 100) if total1 != 0 else float('inf')
    
    analysis.append({
        'URL': 'Total',
        'Period1_Crawls': total1,
        'Period2_Crawls': total2,
        'Difference': total_diff,
        'Percent_Change': total_percent_change
    })

    return analysis

def write_csv(data, file_path):
    with open(file_path, 'w', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=['URL', 'Period1_Crawls', 'Period2_Crawls', 'Difference', 'Percent_Change'])
        writer.writeheader()
        writer.writerows(data)

def format_number(num):
    return f"{num:,}"

def generate_report(analysis, file_path):
    total = analysis[-1]
    top_20_increase = sorted([item for item in analysis[:-1] if item['Difference'] > 0], key=lambda x: x['Difference'], reverse=True)[:20]
    top_20_decrease = sorted([item for item in analysis[:-1] if item['Difference'] < 0], key=lambda x: x['Difference'])[:20]
    top_20_percent_increase = sorted([item for item in analysis[:-1] if item['Percent_Change'] != float('inf')], key=lambda x: x['Percent_Change'], reverse=True)[:20]
    top_20_percent_decrease = sorted([item for item in analysis[:-1] if item['Percent_Change'] < 0], key=lambda x: x['Percent_Change'])[:20]

    report = f"""# Crawl Analysis Report

## Overview
This report compares crawl data from two periods to analyze changes in crawl rates and URL visibility.

## Key Findings
1. Total Crawls:
   - Period 1: {format_number(total['Period1_Crawls'])}
   - Period 2: {format_number(total['Period2_Crawls'])}
   - Difference: {format_number(total['Difference'])} {'increase' if total['Difference'] > 0 else 'decrease'}
   - Percent Change: {total['Percent_Change']:.2f}% {'increase' if total['Percent_Change'] > 0 else 'decrease'}

2. URL Count:
   - Period 1: {format_number(len([item for item in analysis if item['Period1_Crawls'] > 0]))}
   - Period 2: {format_number(len([item for item in analysis if item['Period2_Crawls'] > 0]))}

3. Average Crawls per URL:
   - Period 1: {format_number(int(total['Period1_Crawls'] / (len(analysis) - 1)))}
   - Period 2: {format_number(int(total['Period2_Crawls'] / (len(analysis) - 1)))}

## Top 20 URLs with Highest Crawl Increase:
"""

    for i, item in enumerate(top_20_increase, 1):
        report += f"{i}. {item['URL']} ({format_number(item['Difference'])} increase)\n"

    report += "\n## Top 20 URLs with Highest Crawl Decrease:\n"

    for i, item in enumerate(top_20_decrease, 1):
        report += f"{i}. {item['URL']} ({format_number(abs(item['Difference']))} decrease)\n"

    report += "\n## Top 20 URLs with Highest Crawl Increase Percentage:\n"

    for i, item in enumerate(top_20_percent_increase, 1):
        report += f"{i}. {item['URL']} ({item['Percent_Change']:.2f}% increase)\n"

    report += "\n## Top 20 URLs with Highest Crawl Decrease Percentage:\n"

    for i, item in enumerate(top_20_percent_decrease, 1):
        report += f"{i}. {item['URL']} ({abs(item['Percent_Change']):.2f}% decrease)\n"

    report += """
## Analysis
The data shows a significant change in crawl rates across the analyzed URLs. """

    if total['Difference'] > 0:
        report += f"The total number of crawls increased by {total['Percent_Change']:.2f}%, from {format_number(total['Period1_Crawls'])} in Period 1 to {format_number(total['Period2_Crawls'])} in Period 2. This substantial growth in crawl activity suggests a major change in search engine behavior or website visibility."
    else:
        report += f"The total number of crawls decreased by {abs(total['Percent_Change']):.2f}%, from {format_number(total['Period1_Crawls'])} in Period 1 to {format_number(total['Period2_Crawls'])} in Period 2. This significant reduction in crawl activity suggests a major change in search engine behavior or a decrease in website visibility."

    with open(file_path, 'w') as f:
        f.write(report)

    return report

def generate_png(markdown_content, output_path):
    try:
        # Convert Markdown to HTML
        html_content = markdown.markdown(markdown_content)
        
        # Add some basic styling
        styled_html = f"""
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    background-color: #1e1e1e;
                    color: #b19cd9;
                    padding: 20px;
                }}
                h1, h2 {{
                    color: #d7bfdc;
                }}
                table {{
                    border-collapse: collapse;
                    width: 100%;
                }}
                th, td {{
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: left;
                }}
                th {{
                    background-color: #2d2d2d;
                }}
            </style>
        </head>
        <body>
        {html_content}
        </body>
        </html>
        """
        
        # Convert HTML to PNG
        imgkit.from_string(styled_html, output_path)
        return True
    except Exception as e:
        print(f"PNG generation failed: {str(e)}")
        return False

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        period1 = request.files['period1']
        period2 = request.files['period2']

        period1_path = Path("log_uploads") / period1.filename
        period2_path = Path("log_uploads") / period2.filename

        period1.save(period1_path)
        period2.save(period2_path)

        data1 = read_csv(period1_path)
        data2 = read_csv(period2_path)

        analysis = analyze_crawl_data(data1, data2)

        output_csv = Path("log_uploads") / "crawl_analysis.csv"
        output_report = Path("log_uploads") / "crawl_analysis_report.md"
        output_png = Path("log_uploads") / "crawl_analysis_report.png"

        write_csv(analysis, output_csv)
        report_content = generate_report(analysis, output_report)

        # Generate PNG
        png_generated = generate_png(report_content, str(output_png))
        if not png_generated:
            flash("PNG generation failed. Please check the logs for more information.")

        # Convert Markdown to HTML
        html_content = markdown.markdown(report_content)

        return render_template('result.html', report=Markup(html_content), png_generated=png_generated)

    return render_template('index.html')

@app.route('/download/<filename>')
def download_file(filename):
    return send_file(Path("log_uploads") / filename, as_attachment=True)

@app.route('/delete_files', methods=['POST'])
def delete_files():
    try:
        for file in os.listdir("log_uploads"):
            file_path = os.path.join("log_uploads", file)
            if os.path.isfile(file_path):
                os.unlink(file_path)
        return redirect(url_for('index'))
    except Exception as e:
        return f"An error occurred: {e}"

if __name__ == '__main__':
    app.run(debug=True)

================
File: README.md
================
# Log Analyzer

This Flask application analyzes log data from two periods and generates a report comparing crawl rates and URL visibility.

## Features

- Upload two CSV files containing log data
- Generate a detailed analysis report
- Create CSV, Markdown, and PNG versions of the report
- Dark mode UI with purple text
- Option to delete all uploaded and generated files

## Installation

1. Clone this repository:
   ```
   git clone https://github.com/yourusername/log-analyzer.git
   cd log-analyzer
   ```

2. Create a virtual environment and activate it:
   ```
   python -m venv venv
   source venv/bin/activate  # On Windows, use `venv\Scripts\activate`
   ```

3. Install the required dependencies:
   ```
   pip install -r requirements.txt
   ```

4. Install wkhtmltoimage:
   - On macOS: `brew install wkhtmltopdf`
   - On Ubuntu: `sudo apt-get install wkhtmltopdf`
   - For other systems, check the [wkhtmltopdf downloads page](https://wkhtmltopdf.org/downloads.html)

   Note: wkhtmltoimage is typically included with wkhtmltopdf.

## Usage

1. Run the Flask application:
   ```
   python app.py
   ```

2. Open a web browser and go to `http://localhost:5000`

3. Upload two CSV files containing log data for different periods

4. View the generated report and download CSV, Markdown, or PNG versions

5. Use the "Delete All Files" button to clean up uploaded and generated files when done

## Troubleshooting

If you encounter issues with PNG generation, ensure that `wkhtmltoimage` is properly installed and accessible in your system's PATH. You may need to specify the path to the `wkhtmltoimage` executable in the `app.py` file:

```python
import imgkit
config = imgkit.config(wkhtmltoimage='/path/to/wkhtmltoimage')

# In the generate_png function:
imgkit.from_string(styled_html, output_path, config=config)
```

Replace `/path/to/wkhtmltoimage` with the actual path on your system.

## Contributing

Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

## License

[MIT](https://choosealicense.com/licenses/mit/)

================
File: requirements.txt
================
Flask==2.0.1
Markdown==3.3.4
MarkupSafe==2.0.1
imgkit==1.2.2
